// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String          @db.VarChar(255)
  email         String          @unique @db.Text
  emailVerified DateTime?
  image         String?
  role          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  Invoices      Invoice[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Customer {
  id String @id @default(cuid())
  name      String    @db.VarChar(255)
  email     String    @db.VarChar(255)
  image_url String    @db.VarChar(255)
  Invoices  Invoice[]
}

model Invoice {
  id String @id @default(cuid())
  customer_id String
  amount      Int
  status      String   @db.VarChar(255)
  userId      String?
  date        DateTime @db.Date

  Customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  User     User?    @relation(fields: [userId], references: [id])
}

model Revenue {
  month   String @id @unique @db.VarChar(4)
  revenue Int
}
